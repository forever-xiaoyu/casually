<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[node.js 实现简单接口]]></title>
    <url>%2Fcasually%2F2019%2F06%2F11%2Fnode-js-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[安装 node 并引入 http 模块1234567891011121314151617// 导入http模块:var http = require('http');// 创建http server，并传入回调函数:var server = http.createServer(function (request, response) &#123; // 回调函数接收request和response对象, // 获得HTTP请求的method和url: console.log(request.method + ': ' + request.url); // 将HTTP响应200写入response, 同时设置Content-Type: text/html: response.writeHead(200, &#123;'Content-Type': 'text/html'&#125;); // 将HTTP响应的HTML内容写入response: response.end('Hello world!');&#125;);// 让服务器监听8080端口:server.listen(8080);console.log('Server is running at http://127.0.0.1:8080/'); 运行 server.js1node server.js 打开 http://127.0.0.1:8080/如出现下图则表示服务已启用成功 路由在访问根路径时希望拿到当前目录的 index.html, 使用 request.url 进行判断即可。由于需要读取 index.html 文件，所以要用到 fs 读写模块123456789101112131415161718var http= require(&apos;http&apos;);var fs= require(&apos;fs&apos;);var server= http.createServer(function(request, response)&#123; var url = request.url; if(url === &apos;/&apos;)&#123; fs.readFile(&apos;./index.html&apos;, function(err, data)&#123; if(!err)&#123; response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;text/html;charset=UTF-8&quot;&#125;); response.end(data) &#125;else&#123; throw err; &#125; &#125;); &#125;else&#123; console.log(&quot;错误&quot;); &#125;&#125;);server.listen(8080, &apos;127.0.0.1&apos;); 新建 index.html写一个简单 ajax 请求1234567891011121314151617&lt;div id=&quot;box&quot;&gt;看不到看不到&lt;/div&gt;&lt;button onclick=&quot;success()&quot;&gt;我是按钮&lt;/button&gt;&lt;script&gt;function success()&#123; var http= new XMLHttpRequest(); http.onreadystatechange= function()&#123; if(http.status == 200 &amp;&amp; http.readyState == 4)&#123; var msg= http.responseText; var box= document.getElementById(&apos;box&apos;); box.innerHTML= JSON.parse(msg).name; &#125; &#125; //发送请求 http.open(&apos;GET&apos;, &apos;/data&apos;); http.send();&#125;&lt;/script&gt; 实现一个简单的接口这里使用 json 文件模拟数据库的读取操作，新建一个 data.json 文件，随意添加一些数据，然后在 server.js 中判断请求 url12345678910if(url === &apos;/data&apos;)&#123; fs.readFile(&apos;./data.json&apos;, function(err, data)&#123; if(!err)&#123; response.writeHead(200, &#123;&quot;Content-Type&quot;: &quot;application/json&quot;&#125;); response.end(data); &#125;else&#123; throw err; &#125; &#125;)&#125; 打开 http://127.0.0.1:8080/ 至此，一个简单的接口实现就完成了。]]></content>
      <categories>
        <category>服务器端</category>
      </categories>
      <tags>
        <tag>软件开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[隐藏掉所有图片]]></title>
    <url>%2Fcasually%2F2019%2F02%2F27%2F%E9%9A%90%E8%97%8F%E6%8E%89%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[在浏览网站时，有很多图片看着眼烦，只想浏览纯文字，所以可以使用如下方式隐藏掉所有图片。 本代码可以在控制台执行，推荐使用油猴子插件执行1234var styleCSS = &apos;&lt;style&gt;img&#123;display: none !important;&#125;&lt;/style&gt;&apos;;var styleEle = document.createElement(&apos;div&apos;);styleEle.innerHTML = styleCSS;document.body.appendChild(styleEle);]]></content>
      <categories>
        <category>实用百科</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清除掉那些顽固文件]]></title>
    <url>%2Fcasually%2F2019%2F02%2F26%2F%E6%B8%85%E9%99%A4%E9%A1%BD%E5%9B%BA%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[日常计算机使用过程中，有些时候会碰到一些顽固的文件无法删除的情况，不妨使用如下方式进行尝试。 创建一个任意名称的 bat 脚本，写入如下代码：12345678910111213141516171819202122232425262728293031323334353637383940414243REM QBFC Project Options BeginREM HasVersionInfo: YesREM Companyname:REM Productname: 顽固目录删除器REM Filedescription: 顽固目录删除器REM Copyrights:REM Trademarks: 顽固目录删除器REM Originalname: 顽固目录删除器REM Comments:REM Productversion: 20.10.05.08REM Fileversion: 20.10.05.08REM Internalname: 顽固目录删除器REM Appicon: C:\Documents and Settings\Administrator\桌面\uninstall.icoREM QBFC Project Options Endtitle 顽固目录删除器mode con: cols=70 lines=17@echo off:startclscolor 2fecho.echo.echo.echo 专门快速删除那种不能打开、不能进入、不能删除的顽固目录。echo.echo 注意：删除目录将同时删除其子目录中所有数据！echo.echo.set Choice=echo 请将要删除的顽固目录直接拖入本窗口，然后回车:echo.set /p Choice=if &quot;&quot;%Choice%&quot;&quot; == &quot;&quot; goto startDEL /F /A /Q \\?\&quot;&quot;%Choice%&quot;&quot;RD /S /Q \\?\&quot;&quot;%Choice%&quot;&quot;echo.clsecho.echo.echo.echo 删除完成! 请按任意键返回主目录!pause&gt;nulgoto :start 运行该脚本，将顽固文件拖拽到此脚本中会自动执行强制删除操作]]></content>
      <categories>
        <category>实用百科</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
</search>
